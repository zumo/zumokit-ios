// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from zumo_core.djinni

#import "ZKExchangeRate.h"
#import "ZKExchangeSetting.h"
#import "ZKTransactionFeeRate.h"
#import <Foundation/Foundation.h>
@class ZKUser;
@class ZKUtils;
@class ZKZumoCore;
@protocol ZKChangeListener;
@protocol ZKHistoricalExchangeRatesCallback;
@protocol ZKHttpProvider;
@protocol ZKLogListener;
@protocol ZKUserCallback;
@protocol ZKWebSocketFactory;


/** Entry point to ZumoKit C++ SDK */
@interface ZKZumoCore : NSObject

/**
 * Get ZumoKit SDK version.
 * @return semantic version tag if exists, commit hash otherwise
 */
+ (nonnull NSString *)getVersion;

/**
 * Sets log level for current logger.
 *
 * @param logLevel log level, 'trace', 'debug', 'info', 'warning', 'error', 'critical' or 'off'
 */
+ (void)setLogLevel:(nonnull NSString *)logLevel;

/**
 * Sets log handler for all ZumoKit related logs.
 *
 * @param logListener interface to listen to changes
 * @param logLevel log level, 'trace', 'debug', 'info', 'warning', 'error', 'critical' or 'off'
 */
+ (void)onLog:(nullable id<ZKLogListener>)logListener
     logLevel:(nonnull NSString *)logLevel;

/**
 * Initializes ZumoKit SDK. Should only be called once.
 *
 * @param httpProvider           HTTP provider
 * @param webSocketFactory      WebSocket factory
 * @param apiKey                 ZumoKit API Key
 * @param apiUrl                 ZumoKit API URL
 * @param transactionServiceUrl ZumoKit Transaction Service URL
 * @param cardServiceUrl        ZumoKit Card Service URL
 *
 * @return ZumoKit instance
 */
+ (nullable ZKZumoCore *)init:(nullable id<ZKHttpProvider>)httpProvider
             webSocketFactory:(nullable id<ZKWebSocketFactory>)webSocketFactory
                       apiKey:(nonnull NSString *)apiKey
                       apiUrl:(nonnull NSString *)apiUrl
        transactionServiceUrl:(nonnull NSString *)transactionServiceUrl
               cardServiceUrl:(nonnull NSString *)cardServiceUrl;

/**
 * Signs in user corresponding to user token set. Sets current user to the newly signed in user.
 * Refer to <a href="https://developers.zumo.money/docs/setup/server#get-zumokit-user-token">Server</a> guide for details on how to get user token set.
 *
 * @param userTokenSet   user token set
 * @param callback         an interface to receive the result or error
 *
 * @see `ZKUser`
 */
- (void)signIn:(nonnull NSString *)userTokenSet
      callback:(nullable id<ZKUserCallback>)callback;

/** Signs out current user. */
- (void)signOut;

/**
 * Get currently signed-in user or null.
 *
 * @return current user or null
 */
- (nullable ZKUser *)getCurrentUser;

/**
 * Get crypto utils class.
 *
 * @return crypto utils
 */
- (nullable ZKUtils *)getUtils;

/**
 * Get exchange rate for selected currency pair.
 *
 * @param fromCurrency   currency code
 * @param toCurrency     currency code
 *
 * @return exchange rate or null
 */
- (nullable ZKExchangeRate *)getExchangeRate:(nonnull NSString *)fromCurrency
                                  toCurrency:(nonnull NSString *)toCurrency;

/**
 * Get all available exchange rates.
 *
 * @return mapping between currency pairs and exchange rates
 */
- (nonnull NSDictionary<NSString *, NSDictionary<NSString *, ZKExchangeRate *> *> *)getExchangeRates;

/**
 * Get exchange setting for selected currency pair.
 *
 * @param fromCurrency   currency code
 * @param toCurrency     currency code
 *
 * @return exchange setting or null
 */
- (nullable ZKExchangeSetting *)getExchangeSetting:(nonnull NSString *)fromCurrency
                                        toCurrency:(nonnull NSString *)toCurrency;

/**
 * Get all available exchange settings.
 *
 * @return mapping between currency pairs and exchange settings
 */
- (nonnull NSDictionary<NSString *, NSDictionary<NSString *, ZKExchangeSetting *> *> *)getExchangeSettings;

/**
 * Get transaction fee rates for selected crypto currency.
 *
 * @param currency currency code
 *
 * @return transaction fee rate or null
 */
- (nullable ZKTransactionFeeRate *)getTransactionFeeRate:(nonnull NSString *)currency;

/**
 * Get all available crypto transaction fee rates.
 *
 * @return mapping between cryptocurrencies and transaction fee rate
 */
- (nonnull NSDictionary<NSString *, ZKTransactionFeeRate *> *)getTransactionFeeRates;

/**
 * Fetch historical exchange rates for supported time intervals.
 * On success callback returns historical exchange rates are contained in a mapping between
 * time interval on a top level, from currency on second level, to currency on third level and `ZKExchangeRate` objects.
 *
 * @param callback         an interface to receive the result or error
 *
 * @see `ZKTimeInterval`
 */
- (void)fetchHistoricalExchangeRates:(nullable id<ZKHistoricalExchangeRatesCallback>)callback;

/**
 * Listen to changes in current userâ€™s sign in state, exchange settings and transaction fee rates.
 * @param listener interface to listen to changes
 */
- (void)addChangeListener:(nullable id<ZKChangeListener>)listener;

/**
 * Remove change listener.
 * @param listener interface to listen to changes
 */
- (void)removeChangeListener:(nullable id<ZKChangeListener>)listener;

@end
