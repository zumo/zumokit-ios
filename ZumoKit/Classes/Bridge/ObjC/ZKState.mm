// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from state.djinni

#import "ZKState.h"


@implementation ZKState

- (nonnull instancetype)initWithAccounts:(nonnull NSArray<ZKAccount *> *)accounts
                            transactions:(nonnull NSArray<ZKTransaction *> *)transactions
                                   token:(nonnull NSString *)token
                            activeUserId:(nullable NSString *)activeUserId
                           exchangeRates:(nonnull NSString *)exchangeRates
                     txServiceConnection:(nonnull ZKTxServiceConnection *)txServiceConnection
                             ethGasPrice:(nonnull NSString *)ethGasPrice
                              syncStatus:(ZKSyncStatus)syncStatus
{
    if (self = [super init]) {
        _accounts = [accounts copy];
        _transactions = [transactions copy];
        _token = [token copy];
        _activeUserId = [activeUserId copy];
        _exchangeRates = [exchangeRates copy];
        _txServiceConnection = txServiceConnection;
        _ethGasPrice = [ethGasPrice copy];
        _syncStatus = syncStatus;
    }
    return self;
}

+ (nonnull instancetype)stateWithAccounts:(nonnull NSArray<ZKAccount *> *)accounts
                             transactions:(nonnull NSArray<ZKTransaction *> *)transactions
                                    token:(nonnull NSString *)token
                             activeUserId:(nullable NSString *)activeUserId
                            exchangeRates:(nonnull NSString *)exchangeRates
                      txServiceConnection:(nonnull ZKTxServiceConnection *)txServiceConnection
                              ethGasPrice:(nonnull NSString *)ethGasPrice
                               syncStatus:(ZKSyncStatus)syncStatus
{
    return [(ZKState*)[self alloc] initWithAccounts:accounts
                                       transactions:transactions
                                              token:token
                                       activeUserId:activeUserId
                                      exchangeRates:exchangeRates
                                txServiceConnection:txServiceConnection
                                        ethGasPrice:ethGasPrice
                                         syncStatus:syncStatus];
}

- (BOOL)isEqual:(id)other
{
    if (![other isKindOfClass:[ZKState class]]) {
        return NO;
    }
    ZKState *typedOther = (ZKState *)other;
    return [self.accounts isEqualToArray:typedOther.accounts] &&
            [self.transactions isEqualToArray:typedOther.transactions] &&
            [self.token isEqualToString:typedOther.token] &&
            ((self.activeUserId == nil && typedOther.activeUserId == nil) || (self.activeUserId != nil && [self.activeUserId isEqual:typedOther.activeUserId])) &&
            [self.exchangeRates isEqualToString:typedOther.exchangeRates] &&
            [self.txServiceConnection isEqual:typedOther.txServiceConnection] &&
            [self.ethGasPrice isEqualToString:typedOther.ethGasPrice] &&
            self.syncStatus == typedOther.syncStatus;
}

- (NSUInteger)hash
{
    return NSStringFromClass([self class]).hash ^
            self.accounts.hash ^
            self.transactions.hash ^
            self.token.hash ^
            self.activeUserId.hash ^
            self.exchangeRates.hash ^
            self.txServiceConnection.hash ^
            self.ethGasPrice.hash ^
            (NSUInteger)self.syncStatus;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"<%@ %p accounts:%@ transactions:%@ token:%@ activeUserId:%@ exchangeRates:%@ txServiceConnection:%@ ethGasPrice:%@ syncStatus:%@>", self.class, (void *)self, self.accounts, self.transactions, self.token, self.activeUserId, self.exchangeRates, self.txServiceConnection, self.ethGasPrice, @(self.syncStatus)];
}

@end
