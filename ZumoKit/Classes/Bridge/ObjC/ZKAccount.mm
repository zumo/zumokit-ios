// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from state.djinni

#import "ZKAccount.h"


@implementation ZKAccount

- (nonnull instancetype)initWithId:(nonnull NSString *)id
                              path:(nonnull NSString *)path
                            symbol:(nonnull NSString *)symbol
                              coin:(nonnull NSString *)coin
                           address:(nonnull NSString *)address
                           balance:(nonnull NSString *)balance
                             nonce:(nullable NSNumber *)nonce
                           network:(ZKNetworkType)network
                              type:(ZKAccountType)type
                           version:(int8_t)version
{
    if (self = [super init]) {
        _id = [id copy];
        _path = [path copy];
        _symbol = [symbol copy];
        _coin = [coin copy];
        _address = [address copy];
        _balance = [balance copy];
        _nonce = nonce;
        _network = network;
        _type = type;
        _version = version;
    }
    return self;
}

+ (nonnull instancetype)accountWithId:(nonnull NSString *)id
                                 path:(nonnull NSString *)path
                               symbol:(nonnull NSString *)symbol
                                 coin:(nonnull NSString *)coin
                              address:(nonnull NSString *)address
                              balance:(nonnull NSString *)balance
                                nonce:(nullable NSNumber *)nonce
                              network:(ZKNetworkType)network
                                 type:(ZKAccountType)type
                              version:(int8_t)version
{
    return [(ZKAccount*)[self alloc] initWithId:id
                                           path:path
                                         symbol:symbol
                                           coin:coin
                                        address:address
                                        balance:balance
                                          nonce:nonce
                                        network:network
                                           type:type
                                        version:version];
}

- (BOOL)isEqual:(id)other
{
    if (![other isKindOfClass:[ZKAccount class]]) {
        return NO;
    }
    ZKAccount *typedOther = (ZKAccount *)other;
    return [self.id isEqualToString:typedOther.id] &&
            [self.path isEqualToString:typedOther.path] &&
            [self.symbol isEqualToString:typedOther.symbol] &&
            [self.coin isEqualToString:typedOther.coin] &&
            [self.address isEqualToString:typedOther.address] &&
            [self.balance isEqualToString:typedOther.balance] &&
            ((self.nonce == nil && typedOther.nonce == nil) || (self.nonce != nil && [self.nonce isEqual:typedOther.nonce])) &&
            self.network == typedOther.network &&
            self.type == typedOther.type &&
            self.version == typedOther.version;
}

- (NSUInteger)hash
{
    return NSStringFromClass([self class]).hash ^
            self.id.hash ^
            self.path.hash ^
            self.symbol.hash ^
            self.coin.hash ^
            self.address.hash ^
            self.balance.hash ^
            self.nonce.hash ^
            (NSUInteger)self.network ^
            (NSUInteger)self.type ^
            (NSUInteger)self.version;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"<%@ %p id:%@ path:%@ symbol:%@ coin:%@ address:%@ balance:%@ nonce:%@ network:%@ type:%@ version:%@>", self.class, (void *)self, self.id, self.path, self.symbol, self.coin, self.address, self.balance, self.nonce, @(self.network), @(self.type), @(self.version)];
}

@end
