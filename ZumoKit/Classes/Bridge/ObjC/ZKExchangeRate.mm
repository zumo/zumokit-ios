// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from state.djinni

#import "ZKExchangeRate.h"


@implementation ZKExchangeRate

- (nonnull instancetype)initWithId:(nonnull NSString *)id
                   depositCurrency:(nonnull NSString *)depositCurrency
                  withdrawCurrency:(nonnull NSString *)withdrawCurrency
                           validTo:(int64_t)validTo
                              rate:(nonnull NSString *)rate
                           feeRate:(nonnull NSString *)feeRate
                    depositFeeRate:(nonnull NSString *)depositFeeRate
                       withdrawFee:(nonnull NSString *)withdrawFee
                         timestamp:(int64_t)timestamp
{
    if (self = [super init]) {
        _id = [id copy];
        _depositCurrency = [depositCurrency copy];
        _withdrawCurrency = [withdrawCurrency copy];
        _validTo = validTo;
        _rate = [rate copy];
        _feeRate = [feeRate copy];
        _depositFeeRate = [depositFeeRate copy];
        _withdrawFee = [withdrawFee copy];
        _timestamp = timestamp;
    }
    return self;
}

+ (nonnull instancetype)exchangeRateWithId:(nonnull NSString *)id
                           depositCurrency:(nonnull NSString *)depositCurrency
                          withdrawCurrency:(nonnull NSString *)withdrawCurrency
                                   validTo:(int64_t)validTo
                                      rate:(nonnull NSString *)rate
                                   feeRate:(nonnull NSString *)feeRate
                            depositFeeRate:(nonnull NSString *)depositFeeRate
                               withdrawFee:(nonnull NSString *)withdrawFee
                                 timestamp:(int64_t)timestamp
{
    return [(ZKExchangeRate*)[self alloc] initWithId:id
                                     depositCurrency:depositCurrency
                                    withdrawCurrency:withdrawCurrency
                                             validTo:validTo
                                                rate:rate
                                             feeRate:feeRate
                                      depositFeeRate:depositFeeRate
                                         withdrawFee:withdrawFee
                                           timestamp:timestamp];
}

- (BOOL)isEqual:(id)other
{
    if (![other isKindOfClass:[ZKExchangeRate class]]) {
        return NO;
    }
    ZKExchangeRate *typedOther = (ZKExchangeRate *)other;
    return [self.id isEqualToString:typedOther.id] &&
            [self.depositCurrency isEqualToString:typedOther.depositCurrency] &&
            [self.withdrawCurrency isEqualToString:typedOther.withdrawCurrency] &&
            self.validTo == typedOther.validTo &&
            [self.rate isEqualToString:typedOther.rate] &&
            [self.feeRate isEqualToString:typedOther.feeRate] &&
            [self.depositFeeRate isEqualToString:typedOther.depositFeeRate] &&
            [self.withdrawFee isEqualToString:typedOther.withdrawFee] &&
            self.timestamp == typedOther.timestamp;
}

- (NSUInteger)hash
{
    return NSStringFromClass([self class]).hash ^
            self.id.hash ^
            self.depositCurrency.hash ^
            self.withdrawCurrency.hash ^
            (NSUInteger)self.validTo ^
            self.rate.hash ^
            self.feeRate.hash ^
            self.depositFeeRate.hash ^
            self.withdrawFee.hash ^
            (NSUInteger)self.timestamp;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"<%@ %p id:%@ depositCurrency:%@ withdrawCurrency:%@ validTo:%@ rate:%@ feeRate:%@ depositFeeRate:%@ withdrawFee:%@ timestamp:%@>", self.class, (void *)self, self.id, self.depositCurrency, self.withdrawCurrency, @(self.validTo), self.rate, self.feeRate, self.depositFeeRate, self.withdrawFee, @(self.timestamp)];
}

@end
