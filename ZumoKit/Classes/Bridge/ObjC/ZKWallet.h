// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "ZKComposedExchange.h"
#import "ZKComposedTransaction.h"
#import "ZKExchangeRate.h"
#import "ZKExchangeSettings.h"
#import <Foundation/Foundation.h>
@protocol ZKComposeExchangeCallback;
@protocol ZKComposeTransactionCallback;
@protocol ZKSubmitExchangeCallback;
@protocol ZKSubmitTransactionCallback;


/**
 * User wallet provides methods for transfer and exchange of fiat and cryptocurrency funds.
 * Sending a transaction or making an exchange is a two step process. First a transaction or
 * exchange has to be composed via one of the compose methods, then `ZKComposedTransaction` or
 * `ZKComposedExchange` can be submitted.
 * <p>
 * User wallet instance can be obtained by creating, unlocking or recovering user wallet via `ZKUser` instance.
 */
@interface ZKWallet : NSObject

/**
 * Compose BTC or BSV transaction asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#crypto">Send Transactions</a> guide for usage details.
 * <p>
 * On success `ZKComposedTransaction`  is returned via callback.
 *
 * @param fromAccountId   `ZKAccount` identifier
 * @param changeAccountId change `ZKAccount` identifier, which can be the same as fromAccountId
 * @param destination       destination wallet address
 * @param amount            amount in BTC or BSV
 * @param feeRate          fee rate in satoshis/byte
 * @param sendMax          send maximum possible funds to destination
 * @param callback          an interface to receive the result or error
 */
- (void)composeTransaction:(nonnull NSString *)fromAccountId
           changeAccountId:(nonnull NSString *)changeAccountId
               destination:(nonnull NSString *)destination
                    amount:(nullable NSDecimalNumber *)amount
                   feeRate:(nonnull NSDecimalNumber *)feeRate
                   sendMax:(BOOL)sendMax
                  callback:(nullable id<ZKComposeTransactionCallback>)callback;

/**
 * Compose Ethereum transaction asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#ethereum">Send Transactions</a> guide for usage details.
 * <p>
 * On success `ZKComposedTransaction` is returned via callback.
 *
 * @param fromAccountId `ZKAccount` identifier
 * @param gasPrice       gas price in gwei
 * @param gasLimit       gas limit
 * @param destination     destination wallet address
 * @param amount          amount in ETH
 * @param data            data in string format or null
 * @param nonce           next transaction nonce or null
 * @param sendMax        send maximum possible funds to destination
 * @param callback        an interface to receive the result or error
 */
- (void)composeEthTransaction:(nonnull NSString *)fromAccountId
                     gasPrice:(nonnull NSDecimalNumber *)gasPrice
                     gasLimit:(nonnull NSDecimalNumber *)gasLimit
                  destination:(nullable NSString *)destination
                       amount:(nullable NSDecimalNumber *)amount
                         data:(nullable NSString *)data
                        nonce:(nullable NSNumber *)nonce
                      sendMax:(BOOL)sendMax
                     callback:(nullable id<ZKComposeTransactionCallback>)callback;

/**
 * Compose fiat transaction between users in Zumo ecosystem asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#internal-fiat-transaction">Send Transactions</a> guide for usage details.
 * <p>
 * On success `ZKComposedTransaction` is returned via callback.
 *
 * @param fromAccountId `ZKAccount` identifier
 * @param toAccountId   `ZKAccount` identifier
 * @param amount          amount in source account currency
 * @param sendMax        send maximum possible funds to destination
 * @param callback        an interface to receive the result or error
 */
- (void)composeInternalFiatTransaction:(nonnull NSString *)fromAccountId
                           toAccountId:(nonnull NSString *)toAccountId
                                amount:(nullable NSDecimalNumber *)amount
                               sendMax:(BOOL)sendMax
                              callback:(nullable id<ZKComposeTransactionCallback>)callback;

/**
 * Compose transaction to nominated account asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#external-fiat-transaction">Send Transactions</a> guide for usage details.
 * <p>
 * On success `ZKComposedTransaction` object is returned via callback.
 *
 * @param fromAccountId `ZKAccount` identifier
 * @param amount          amount in source account currency
 * @param sendMax        send maximum possible funds to destination
 * @param callback        an interface to receive the result or error
 */
- (void)composeTransactionToNominatedAccount:(nonnull NSString *)fromAccountId
                                      amount:(nullable NSDecimalNumber *)amount
                                     sendMax:(BOOL)sendMax
                                    callback:(nullable id<ZKComposeTransactionCallback>)callback;

/**
 * Submit a transaction asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#submit-transaction">Send Transactions</a> guide for usage details.
 * <p>
 * On success `ZKTransaction` object is returned via callback.
 *
 * @param composedTransaction Composed transaction retrieved as a result
 *                             of one of the compose transaction methods
 * @param callback An interface to receive the result or error
 */
- (void)submitTransaction:(nonnull ZKComposedTransaction *)composedTransaction
                 callback:(nullable id<ZKSubmitTransactionCallback>)callback;

/**
 * Compose Bitcoin transaction asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/make-exchanges#compose-exchange">Make Exchanges</a> guide for usage details.
 * <p>
 * On success `ZKComposedExchange`  is returned via callback.
 *
 * @param depositAccountId  `ZKAccount` identifier
 * @param withdrawAccountId `ZKAccount` identifier
 * @param exchangeRate       Zumo exchange rate obtained from ZumoKit state
 * @param exchangeSettings   Zumo exchange settings obtained from ZumoKit state
 * @param amount              amount in deposit account currency
 * @param sendMax            exchange maximum possible funds
 * @param callback            an interface to receive the result or error
 */
- (void)composeExchange:(nonnull NSString *)depositAccountId
      withdrawAccountId:(nonnull NSString *)withdrawAccountId
           exchangeRate:(nonnull ZKExchangeRate *)exchangeRate
       exchangeSettings:(nonnull ZKExchangeSettings *)exchangeSettings
                 amount:(nullable NSDecimalNumber *)amount
                sendMax:(BOOL)sendMax
               callback:(nullable id<ZKComposeExchangeCallback>)callback;

/**
 * Submit an exchange asynchronously. <a target="_top" href="https://developers.zumo.money/docs/guides/make-exchanges#submit-exchange">Make Exchanges</a> guide for usage details.
 * <p>
 * On success `ZKExchange` object is returned via callback.
 *
 * @param composedExchange Composed exchange retrieved as the result
 *                          of <code>composeExchange</code> method
 * @param callback An interface to receive the result or error
 */
- (void)submitExchange:(nonnull ZKComposedExchange *)composedExchange
              callback:(nullable id<ZKSubmitExchangeCallback>)callback;

@end
