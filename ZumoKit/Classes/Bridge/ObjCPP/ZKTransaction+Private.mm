// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from state.djinni

#import "ZKTransaction+Private.h"
#import "DJIMarshal+Private.h"
#import "ZKTransactionStatus+Private.h"
#import "ZKTransactionType+Private.h"
#include <cassert>

namespace djinni_generated {

auto Transaction::toCpp(ObjcType obj) -> CppType
{
    assert(obj);
    return {::djinni::String::toCpp(obj.id),
            ::djinni::Enum<::zumo::TransactionType, ZKTransactionType>::toCpp(obj.type),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.txHash),
            ::djinni::String::toCpp(obj.accountId),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.symbol),
            ::djinni::String::toCpp(obj.coin),
            ::djinni::Optional<std::experimental::optional, ::djinni::I32>::toCpp(obj.chainId),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.nonce),
            ::djinni::Enum<::zumo::TransactionStatus, ZKTransactionStatus>::toCpp(obj.status),
            ::djinni::String::toCpp(obj.fromAddress),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.fromUserId),
            ::djinni::String::toCpp(obj.toAddress),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.toUserId),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.value),
            ::djinni::Map<::djinni::String, ::djinni::String>::toCpp(obj.fiatValue),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.data),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.gasPrice),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.gasLimit),
            ::djinni::String::toCpp(obj.cost),
            ::djinni::Map<::djinni::String, ::djinni::String>::toCpp(obj.fiatCost),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.submittedAt),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.confirmedAt),
            ::djinni::I64::toCpp(obj.timestamp)};
}

auto Transaction::fromCpp(const CppType& cpp) -> ObjcType
{
    return [[ZKTransaction alloc] initWithId:(::djinni::String::fromCpp(cpp.id))
                                        type:(::djinni::Enum<::zumo::TransactionType, ZKTransactionType>::fromCpp(cpp.type))
                                      txHash:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.tx_hash))
                                   accountId:(::djinni::String::fromCpp(cpp.account_id))
                                      symbol:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.symbol))
                                        coin:(::djinni::String::fromCpp(cpp.coin))
                                     chainId:(::djinni::Optional<std::experimental::optional, ::djinni::I32>::fromCpp(cpp.chain_id))
                                       nonce:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.nonce))
                                      status:(::djinni::Enum<::zumo::TransactionStatus, ZKTransactionStatus>::fromCpp(cpp.status))
                                 fromAddress:(::djinni::String::fromCpp(cpp.from_address))
                                  fromUserId:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.from_user_id))
                                   toAddress:(::djinni::String::fromCpp(cpp.to_address))
                                    toUserId:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.to_user_id))
                                       value:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.value))
                                   fiatValue:(::djinni::Map<::djinni::String, ::djinni::String>::fromCpp(cpp.fiat_value))
                                        data:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.data))
                                    gasPrice:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.gas_price))
                                    gasLimit:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.gas_limit))
                                        cost:(::djinni::String::fromCpp(cpp.cost))
                                    fiatCost:(::djinni::Map<::djinni::String, ::djinni::String>::fromCpp(cpp.fiat_cost))
                                 submittedAt:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.submitted_at))
                                 confirmedAt:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.confirmed_at))
                                   timestamp:(::djinni::I64::fromCpp(cpp.timestamp))];
}

}  // namespace djinni_generated
