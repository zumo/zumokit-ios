// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "ZKWallet+Private.h"
#import "ZKWallet.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "ZKComposeExchangeCallback+Private.h"
#import "ZKComposeTransactionCallback+Private.h"
#import "ZKComposedExchange+Private.h"
#import "ZKComposedTransaction+Private.h"
#import "ZKExchangeRate+Private.h"
#import "ZKSubmitExchangeCallback+Private.h"
#import "ZKSubmitTransactionCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKWallet ()

- (id)initWithCpp:(const std::shared_ptr<::zumo::Wallet>&)cppRef;

@end

@implementation ZKWallet {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::Wallet>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::Wallet>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)submitTransaction:(nonnull ZKComposedTransaction *)composedTransaction
                 callback:(nullable id<ZKSubmitTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->submit_transaction(::djinni_generated::ComposedTransaction::toCpp(composedTransaction),
                                                ::djinni_generated::SubmitTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)composeEthTransaction:(nonnull NSString *)accountId
                     gasPrice:(nonnull NSString *)gasPrice
                     gasLimit:(nonnull NSString *)gasLimit
                           to:(nullable NSString *)to
                        value:(nullable NSString *)value
                         data:(nullable NSString *)data
                        nonce:(nullable NSNumber *)nonce
                     callback:(nullable id<ZKComposeTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->compose_eth_transaction(::djinni::String::toCpp(accountId),
                                                     ::djinni::String::toCpp(gasPrice),
                                                     ::djinni::String::toCpp(gasLimit),
                                                     ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(to),
                                                     ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(value),
                                                     ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(data),
                                                     ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(nonce),
                                                     ::djinni_generated::ComposeTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)composeBtcTransaction:(nonnull NSString *)accountId
              changeAccountId:(nonnull NSString *)changeAccountId
                           to:(nonnull NSString *)to
                        value:(nonnull NSString *)value
                      feeRate:(nonnull NSString *)feeRate
                     callback:(nullable id<ZKComposeTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->compose_btc_transaction(::djinni::String::toCpp(accountId),
                                                     ::djinni::String::toCpp(changeAccountId),
                                                     ::djinni::String::toCpp(to),
                                                     ::djinni::String::toCpp(value),
                                                     ::djinni::String::toCpp(feeRate),
                                                     ::djinni_generated::ComposeTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)submitExchange:(nonnull ZKComposedExchange *)composedExchange
              callback:(nullable id<ZKSubmitExchangeCallback>)callback {
    try {
        _cppRefHandle.get()->submit_exchange(::djinni_generated::ComposedExchange::toCpp(composedExchange),
                                             ::djinni_generated::SubmitExchangeCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)composeExchange:(nonnull NSString *)depositAccountId
      withdrawAccountId:(nonnull NSString *)withdrawAccountId
          exchangeRates:(nonnull NSDictionary<NSString *, NSDictionary<NSString *, ZKExchangeRate *> *> *)exchangeRates
                  value:(nonnull NSString *)value
               callback:(nullable id<ZKComposeExchangeCallback>)callback {
    try {
        _cppRefHandle.get()->compose_exchange(::djinni::String::toCpp(depositAccountId),
                                              ::djinni::String::toCpp(withdrawAccountId),
                                              ::djinni::Map<::djinni::String, ::djinni::Map<::djinni::String, ::djinni_generated::ExchangeRate>>::toCpp(exchangeRates),
                                              ::djinni::String::toCpp(value),
                                              ::djinni_generated::ComposeExchangeCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSString *)maxSpendableEth:(nonnull NSString *)accountId
                              gasPrice:(nonnull NSString *)gasPrice
                              gasLimit:(nonnull NSString *)gasLimit {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->max_spendable_eth(::djinni::String::toCpp(accountId),
                                                                     ::djinni::String::toCpp(gasPrice),
                                                                     ::djinni::String::toCpp(gasLimit));
        return ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSString *)maxSpendableBtc:(nonnull NSString *)accountId
                                    to:(nullable NSString *)to
                               feeRate:(nonnull NSString *)feeRate {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->max_spendable_btc(::djinni::String::toCpp(accountId),
                                                                     ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(to),
                                                                     ::djinni::String::toCpp(feeRate));
        return ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Wallet::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Wallet::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<ZKWallet>(cpp);
}

}  // namespace djinni_generated

@end
