// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "ZKWallet+Private.h"
#import "ZKWallet.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "ZKSendTransactionCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKWallet ()

- (id)initWithCpp:(const std::shared_ptr<::zumo::Wallet>&)cppRef;

@end

@implementation ZKWallet {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::Wallet>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::Wallet>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)sendEthTransaction:(nonnull NSString *)accountId
                  gasPrice:(nonnull NSString *)gasPrice
                  gasLimit:(nonnull NSString *)gasLimit
                        to:(nullable NSString *)to
                     value:(nullable NSString *)value
                      data:(nullable NSString *)data
                     nonce:(nullable NSNumber *)nonce
                  callback:(nullable id<ZKSendTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->send_eth_transaction(::djinni::String::toCpp(accountId),
                                                  ::djinni::String::toCpp(gasPrice),
                                                  ::djinni::String::toCpp(gasLimit),
                                                  ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(to),
                                                  ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(value),
                                                  ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(data),
                                                  ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(nonce),
                                                  ::djinni_generated::SendTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Wallet::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Wallet::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<ZKWallet>(cpp);
}

}  // namespace djinni_generated

@end
