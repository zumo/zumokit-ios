// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "ZKWallet+Private.h"
#import "ZKWallet.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NSDecimalNumber+ZumoKit.h"
#import "ZKComposeTransactionCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKWallet ()

- (id)initWithCpp:(const std::shared_ptr<::zumo::Wallet>&)cppRef;

@end

@implementation ZKWallet {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::Wallet>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::Wallet>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)composeTransaction:(nonnull NSString *)fromAccountId
           changeAccountId:(nonnull NSString *)changeAccountId
               destination:(nonnull NSString *)destination
                    amount:(nullable NSDecimalNumber *)amount
                   feeRate:(nonnull NSDecimalNumber *)feeRate
                   sendMax:(BOOL)sendMax
                  callback:(nullable id<ZKComposeTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->compose_transaction(::djinni::String::toCpp(fromAccountId),
                                                 ::djinni::String::toCpp(changeAccountId),
                                                 ::djinni::String::toCpp(destination),
                                                 ::djinni::Optional<std::optional, ::zumo::djinni::objc::DecimalConverter>::toCpp(amount),
                                                 ::zumo::djinni::objc::DecimalConverter::toCpp(feeRate),
                                                 ::djinni::Bool::toCpp(sendMax),
                                                 ::djinni_generated::ComposeTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)composeEthTransaction:(nonnull NSString *)fromAccountId
                     gasPrice:(nonnull NSDecimalNumber *)gasPrice
                     gasLimit:(int32_t)gasLimit
                  destination:(nullable NSString *)destination
                       amount:(nullable NSDecimalNumber *)amount
                         data:(nullable NSString *)data
                        nonce:(nullable NSNumber *)nonce
                      sendMax:(BOOL)sendMax
                     callback:(nullable id<ZKComposeTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->compose_eth_transaction(::djinni::String::toCpp(fromAccountId),
                                                     ::zumo::djinni::objc::DecimalConverter::toCpp(gasPrice),
                                                     ::djinni::I32::toCpp(gasLimit),
                                                     ::djinni::Optional<std::optional, ::djinni::String>::toCpp(destination),
                                                     ::djinni::Optional<std::optional, ::zumo::djinni::objc::DecimalConverter>::toCpp(amount),
                                                     ::djinni::Optional<std::optional, ::djinni::String>::toCpp(data),
                                                     ::djinni::Optional<std::optional, ::djinni::I32>::toCpp(nonce),
                                                     ::djinni::Bool::toCpp(sendMax),
                                                     ::djinni_generated::ComposeTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Wallet::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Wallet::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<ZKWallet>(cpp);
}

}  // namespace djinni_generated

@end
