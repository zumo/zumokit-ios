// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "ZKWallet+Private.h"
#import "ZKWallet.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NSDecimalNumber+ZumoKit.h"
#import "ZKComposeExchangeCallback+Private.h"
#import "ZKComposeTransactionCallback+Private.h"
#import "ZKComposedExchange+Private.h"
#import "ZKComposedTransaction+Private.h"
#import "ZKExchangeRate+Private.h"
#import "ZKExchangeSettings+Private.h"
#import "ZKSubmitExchangeCallback+Private.h"
#import "ZKSubmitTransactionCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKWallet ()

- (id)initWithCpp:(const std::shared_ptr<::zumo::Wallet>&)cppRef;

@end

@implementation ZKWallet {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::Wallet>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::Wallet>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)submitTransaction:(nonnull ZKComposedTransaction *)composedTransaction
                 callback:(nullable id<ZKSubmitTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->submit_transaction(::djinni_generated::ComposedTransaction::toCpp(composedTransaction),
                                                ::djinni_generated::SubmitTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)composeEthTransaction:(nonnull NSString *)fromAccountId
                     gasPrice:(nonnull NSDecimalNumber *)gasPrice
                     gasLimit:(nonnull NSDecimalNumber *)gasLimit
                  destination:(nullable NSString *)destination
                       amount:(nullable NSDecimalNumber *)amount
                         data:(nullable NSString *)data
                        nonce:(nullable NSNumber *)nonce
                      sendMax:(BOOL)sendMax
                     callback:(nullable id<ZKComposeTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->compose_eth_transaction(::djinni::String::toCpp(fromAccountId),
                                                     ::zumo::djinni::objc::DecimalConverter::toCpp(gasPrice),
                                                     ::zumo::djinni::objc::DecimalConverter::toCpp(gasLimit),
                                                     ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(destination),
                                                     ::djinni::Optional<std::experimental::optional, ::zumo::djinni::objc::DecimalConverter>::toCpp(amount),
                                                     ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(data),
                                                     ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(nonce),
                                                     ::djinni::Bool::toCpp(sendMax),
                                                     ::djinni_generated::ComposeTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)composeBtcTransaction:(nonnull NSString *)fromAccountId
              changeAccountId:(nonnull NSString *)changeAccountId
                  destination:(nonnull NSString *)destination
                       amount:(nullable NSDecimalNumber *)amount
                      feeRate:(nonnull NSDecimalNumber *)feeRate
                      sendMax:(BOOL)sendMax
                     callback:(nullable id<ZKComposeTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->compose_btc_transaction(::djinni::String::toCpp(fromAccountId),
                                                     ::djinni::String::toCpp(changeAccountId),
                                                     ::djinni::String::toCpp(destination),
                                                     ::djinni::Optional<std::experimental::optional, ::zumo::djinni::objc::DecimalConverter>::toCpp(amount),
                                                     ::zumo::djinni::objc::DecimalConverter::toCpp(feeRate),
                                                     ::djinni::Bool::toCpp(sendMax),
                                                     ::djinni_generated::ComposeTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)composeInternalFiatTransaction:(nonnull NSString *)fromAccountId
                           toAccountId:(nonnull NSString *)toAccountId
                                amount:(nullable NSDecimalNumber *)amount
                               sendMax:(BOOL)sendMax
                              callback:(nullable id<ZKComposeTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->compose_internal_fiat_transaction(::djinni::String::toCpp(fromAccountId),
                                                               ::djinni::String::toCpp(toAccountId),
                                                               ::djinni::Optional<std::experimental::optional, ::zumo::djinni::objc::DecimalConverter>::toCpp(amount),
                                                               ::djinni::Bool::toCpp(sendMax),
                                                               ::djinni_generated::ComposeTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)composeTransactionToNominatedAccount:(nonnull NSString *)fromAccountId
                                      amount:(nullable NSDecimalNumber *)amount
                                     sendMax:(BOOL)sendMax
                                    callback:(nullable id<ZKComposeTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->compose_transaction_to_nominated_account(::djinni::String::toCpp(fromAccountId),
                                                                      ::djinni::Optional<std::experimental::optional, ::zumo::djinni::objc::DecimalConverter>::toCpp(amount),
                                                                      ::djinni::Bool::toCpp(sendMax),
                                                                      ::djinni_generated::ComposeTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)submitExchange:(nonnull ZKComposedExchange *)composedExchange
              callback:(nullable id<ZKSubmitExchangeCallback>)callback {
    try {
        _cppRefHandle.get()->submit_exchange(::djinni_generated::ComposedExchange::toCpp(composedExchange),
                                             ::djinni_generated::SubmitExchangeCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)composeExchange:(nonnull NSString *)depositAccountId
      withdrawAccountId:(nonnull NSString *)withdrawAccountId
           exchangeRate:(nonnull ZKExchangeRate *)exchangeRate
       exchangeSettings:(nonnull ZKExchangeSettings *)exchangeSettings
                 amount:(nullable NSDecimalNumber *)amount
                sendMax:(BOOL)sendMax
               callback:(nullable id<ZKComposeExchangeCallback>)callback {
    try {
        _cppRefHandle.get()->compose_exchange(::djinni::String::toCpp(depositAccountId),
                                              ::djinni::String::toCpp(withdrawAccountId),
                                              ::djinni_generated::ExchangeRate::toCpp(exchangeRate),
                                              ::djinni_generated::ExchangeSettings::toCpp(exchangeSettings),
                                              ::djinni::Optional<std::experimental::optional, ::zumo::djinni::objc::DecimalConverter>::toCpp(amount),
                                              ::djinni::Bool::toCpp(sendMax),
                                              ::djinni_generated::ComposeExchangeCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Wallet::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Wallet::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<ZKWallet>(cpp);
}

}  // namespace djinni_generated

@end
