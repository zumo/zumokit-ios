// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from zumo_core.djinni

#import "ZKZumoCore+Private.h"
#import "ZKZumoCore.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "ZKChangeListener+Private.h"
#import "ZKExchangeRate+Private.h"
#import "ZKExchangeSetting+Private.h"
#import "ZKHistoricalExchangeRatesCallback+Private.h"
#import "ZKHttpProvider+Private.h"
#import "ZKTransactionFeeRate+Private.h"
#import "ZKUser+Private.h"
#import "ZKUserCallback+Private.h"
#import "ZKUtils+Private.h"
#import "ZKWebSocketFactory+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKZumoCore ()

- (id)initWithCpp:(const std::shared_ptr<::zumo::ZumoCore>&)cppRef;

@end

@implementation ZKZumoCore {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::ZumoCore>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::ZumoCore>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nonnull NSString *)getVersion {
    try {
        auto objcpp_result_ = ::zumo::ZumoCore::get_version();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable ZKZumoCore *)init:(nullable id<ZKHttpProvider>)httpProvider
             webSocketFactory:(nullable id<ZKWebSocketFactory>)webSocketFactory
                       apiKey:(nonnull NSString *)apiKey
                       apiUrl:(nonnull NSString *)apiUrl
        transactionServiceUrl:(nonnull NSString *)transactionServiceUrl
               cardServiceUrl:(nonnull NSString *)cardServiceUrl {
    try {
        auto objcpp_result_ = ::zumo::ZumoCore::init(::djinni_generated::HttpProvider::toCpp(httpProvider),
                                                     ::djinni_generated::WebSocketFactory::toCpp(webSocketFactory),
                                                     ::djinni::String::toCpp(apiKey),
                                                     ::djinni::String::toCpp(apiUrl),
                                                     ::djinni::String::toCpp(transactionServiceUrl),
                                                     ::djinni::String::toCpp(cardServiceUrl));
        return ::djinni_generated::ZumoCore::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)signIn:(nonnull NSString *)userTokenSet
      callback:(nullable id<ZKUserCallback>)callback {
    try {
        _cppRefHandle.get()->sign_in(::djinni::String::toCpp(userTokenSet),
                                     ::djinni_generated::UserCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)signOut {
    try {
        _cppRefHandle.get()->sign_out();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKUser *)getCurrentUser {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_current_user();
        return ::djinni_generated::User::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKUtils *)getUtils {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_utils();
        return ::djinni_generated::Utils::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKExchangeRate *)getExchangeRate:(nonnull NSString *)fromCurrency
                                  toCurrency:(nonnull NSString *)toCurrency {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_exchange_rate(::djinni::String::toCpp(fromCurrency),
                                                                     ::djinni::String::toCpp(toCurrency));
        return ::djinni::Optional<std::optional, ::djinni_generated::ExchangeRate>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSDictionary<NSString *, NSDictionary<NSString *, ZKExchangeRate *> *> *)getExchangeRates {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_exchange_rates();
        return ::djinni::Map<::djinni::String, ::djinni::Map<::djinni::String, ::djinni_generated::ExchangeRate>>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKExchangeSetting *)getExchangeSetting:(nonnull NSString *)fromCurrency
                                        toCurrency:(nonnull NSString *)toCurrency {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_exchange_setting(::djinni::String::toCpp(fromCurrency),
                                                                        ::djinni::String::toCpp(toCurrency));
        return ::djinni::Optional<std::optional, ::djinni_generated::ExchangeSetting>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSDictionary<NSString *, NSDictionary<NSString *, ZKExchangeSetting *> *> *)getExchangeSettings {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_exchange_settings();
        return ::djinni::Map<::djinni::String, ::djinni::Map<::djinni::String, ::djinni_generated::ExchangeSetting>>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKTransactionFeeRate *)getTransactionFeeRate:(nonnull NSString *)currency {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_transaction_fee_rate(::djinni::String::toCpp(currency));
        return ::djinni::Optional<std::optional, ::djinni_generated::TransactionFeeRate>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSDictionary<NSString *, ZKTransactionFeeRate *> *)getTransactionFeeRates {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_transaction_fee_rates();
        return ::djinni::Map<::djinni::String, ::djinni_generated::TransactionFeeRate>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)fetchHistoricalExchangeRates:(nullable id<ZKHistoricalExchangeRatesCallback>)callback {
    try {
        _cppRefHandle.get()->fetch_historical_exchange_rates(::djinni_generated::HistoricalExchangeRatesCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addChangeListener:(nullable id<ZKChangeListener>)listener {
    try {
        _cppRefHandle.get()->add_change_listener(::djinni_generated::ChangeListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)removeChangeListener:(nullable id<ZKChangeListener>)listener {
    try {
        _cppRefHandle.get()->remove_change_listener(::djinni_generated::ChangeListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ZumoCore::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ZumoCore::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<ZKZumoCore>(cpp);
}

}  // namespace djinni_generated

@end
