// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from zumo_core.djinni

#import "ZKZumoCore+Private.h"
#import "ZKZumoCore.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "ZKExchangeRate+Private.h"
#import "ZKExchangeSettings+Private.h"
#import "ZKFeeRates+Private.h"
#import "ZKHistoricalExchangeRatesCallback+Private.h"
#import "ZKHttpImpl+Private.h"
#import "ZKUser+Private.h"
#import "ZKUserCallback+Private.h"
#import "ZKUtils+Private.h"
#import "ZKWebSocketImpl+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKZumoCore ()

- (id)initWithCpp:(const std::shared_ptr<::zumo::ZumoCore>&)cppRef;

@end

@implementation ZKZumoCore {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::ZumoCore>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::ZumoCore>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nonnull NSString *)getVersion {
    try {
        auto objcpp_result_ = ::zumo::ZumoCore::get_version();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable ZKZumoCore *)init:(nullable id<ZKHttpImpl>)httpImpl
                       wsImpl:(nullable id<ZKWebSocketImpl>)wsImpl
                       apiKey:(nonnull NSString *)apiKey
                       apiUrl:(nonnull NSString *)apiUrl
                 txServiceUrl:(nonnull NSString *)txServiceUrl {
    try {
        auto objcpp_result_ = ::zumo::ZumoCore::init(::djinni_generated::HttpImpl::toCpp(httpImpl),
                                                     ::djinni_generated::WebSocketImpl::toCpp(wsImpl),
                                                     ::djinni::String::toCpp(apiKey),
                                                     ::djinni::String::toCpp(apiUrl),
                                                     ::djinni::String::toCpp(txServiceUrl));
        return ::djinni_generated::ZumoCore::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)authUser:(nonnull NSString *)userTokenSet
        callback:(nullable id<ZKUserCallback>)callback {
    try {
        _cppRefHandle.get()->auth_user(::djinni::String::toCpp(userTokenSet),
                                       ::djinni_generated::UserCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKUser *)getActiveUser {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_active_user();
        return ::djinni_generated::User::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKUtils *)getUtils {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_utils();
        return ::djinni_generated::Utils::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKExchangeRate *)getExchangeRate:(nonnull NSString *)fromCurrency
                                  toCurrency:(nonnull NSString *)toCurrency {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_exchange_rate(::djinni::String::toCpp(fromCurrency),
                                                                     ::djinni::String::toCpp(toCurrency));
        return ::djinni::Optional<std::experimental::optional, ::djinni_generated::ExchangeRate>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKExchangeSettings *)getExchangeSettings:(nonnull NSString *)fromCurrency
                                          toCurrency:(nonnull NSString *)toCurrency {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_exchange_settings(::djinni::String::toCpp(fromCurrency),
                                                                         ::djinni::String::toCpp(toCurrency));
        return ::djinni::Optional<std::experimental::optional, ::djinni_generated::ExchangeSettings>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKFeeRates *)getFeeRates:(nonnull NSString *)currency {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_fee_rates(::djinni::String::toCpp(currency));
        return ::djinni::Optional<std::experimental::optional, ::djinni_generated::FeeRates>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)fetchHistoricalExchangeRates:(nullable id<ZKHistoricalExchangeRatesCallback>)callback {
    try {
        _cppRefHandle.get()->fetch_historical_exchange_rates(::djinni_generated::HistoricalExchangeRatesCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ZumoCore::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ZumoCore::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<ZKZumoCore>(cpp);
}

}  // namespace djinni_generated

@end
