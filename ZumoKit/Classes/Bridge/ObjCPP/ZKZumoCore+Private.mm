// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from zumo_core.djinni

#import "ZKZumoCore+Private.h"
#import "ZKZumoCore.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "ZKAuthCallback+Private.h"
#import "ZKHttpImpl+Private.h"
#import "ZKState+Private.h"
#import "ZKStateListener+Private.h"
#import "ZKUtils+Private.h"
#import "ZKWebSocketImpl+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKZumoCore ()

- (id)initWithCpp:(const std::shared_ptr<::zumo::ZumoCore>&)cppRef;

@end

@implementation ZKZumoCore {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::ZumoCore>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::ZumoCore>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nonnull NSString *)getVersion {
    try {
        auto objcpp_result_ = ::zumo::ZumoCore::get_version();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable ZKZumoCore *)init:(nullable id<ZKHttpImpl>)httpImpl
                       wsImpl:(nullable id<ZKWebSocketImpl>)wsImpl
                       apiKey:(nonnull NSString *)apiKey
                      apiRoot:(nonnull NSString *)apiRoot
                       myRoot:(nonnull NSString *)myRoot
                txServiceRoot:(nonnull NSString *)txServiceRoot {
    try {
        auto objcpp_result_ = ::zumo::ZumoCore::init(::djinni_generated::HttpImpl::toCpp(httpImpl),
                                                     ::djinni_generated::WebSocketImpl::toCpp(wsImpl),
                                                     ::djinni::String::toCpp(apiKey),
                                                     ::djinni::String::toCpp(apiRoot),
                                                     ::djinni::String::toCpp(myRoot),
                                                     ::djinni::String::toCpp(txServiceRoot));
        return ::djinni_generated::ZumoCore::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)auth:(nonnull NSString *)token
     headers:(nullable NSDictionary<NSString *, NSString *> *)headers
    callback:(nullable id<ZKAuthCallback>)callback {
    try {
        _cppRefHandle.get()->auth(::djinni::String::toCpp(token),
                                  ::djinni::Optional<std::experimental::optional, ::djinni::Map<::djinni::String, ::djinni::String>>::toCpp(headers),
                                  ::djinni_generated::AuthCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKUtils *)getUtils {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_utils();
        return ::djinni_generated::Utils::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull ZKState *)getState {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_state();
        return ::djinni_generated::State::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addStateListener:(nullable id<ZKStateListener>)listener {
    try {
        _cppRefHandle.get()->add_state_listener(::djinni_generated::StateListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)removeStateListener:(nullable id<ZKStateListener>)listener {
    try {
        _cppRefHandle.get()->remove_state_listener(::djinni_generated::StateListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ZumoCore::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ZumoCore::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<ZKZumoCore>(cpp);
}

}  // namespace djinni_generated

@end
