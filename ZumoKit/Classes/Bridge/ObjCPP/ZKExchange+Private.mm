// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from state.djinni

#import "ZKExchange+Private.h"
#import "DJIMarshal+Private.h"
#import "ZKExchangeFees+Private.h"
#import "ZKExchangeRate+Private.h"
#include <cassert>

namespace djinni_generated {

auto Exchange::toCpp(ObjcType obj) -> CppType
{
    assert(obj);
    return {::djinni::String::toCpp(obj.id),
            ::djinni::String::toCpp(obj.status),
            ::djinni::String::toCpp(obj.depositCurrency),
            ::djinni::String::toCpp(obj.depositAccountId),
            ::djinni::String::toCpp(obj.depositTransactionId),
            ::djinni::String::toCpp(obj.withdrawCurrency),
            ::djinni::String::toCpp(obj.withdrawAccountId),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.withdrawTransactionId),
            ::djinni::String::toCpp(obj.amount),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(obj.depositFee),
            ::djinni::String::toCpp(obj.returnAmount),
            ::djinni::String::toCpp(obj.exchangeFee),
            ::djinni::String::toCpp(obj.withdrawFee),
            ::djinni_generated::ExchangeRate::toCpp(obj.exchangeRate),
            ::djinni_generated::ExchangeFees::toCpp(obj.exchangeFees),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.submittedAt),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(obj.confirmedAt)};
}

auto Exchange::fromCpp(const CppType& cpp) -> ObjcType
{
    return [[ZKExchange alloc] initWithId:(::djinni::String::fromCpp(cpp.id))
                                   status:(::djinni::String::fromCpp(cpp.status))
                          depositCurrency:(::djinni::String::fromCpp(cpp.deposit_currency))
                         depositAccountId:(::djinni::String::fromCpp(cpp.deposit_account_id))
                     depositTransactionId:(::djinni::String::fromCpp(cpp.deposit_transaction_id))
                         withdrawCurrency:(::djinni::String::fromCpp(cpp.withdraw_currency))
                        withdrawAccountId:(::djinni::String::fromCpp(cpp.withdraw_account_id))
                    withdrawTransactionId:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.withdraw_transaction_id))
                                   amount:(::djinni::String::fromCpp(cpp.amount))
                               depositFee:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(cpp.deposit_fee))
                             returnAmount:(::djinni::String::fromCpp(cpp.return_amount))
                              exchangeFee:(::djinni::String::fromCpp(cpp.exchange_fee))
                              withdrawFee:(::djinni::String::fromCpp(cpp.withdraw_fee))
                             exchangeRate:(::djinni_generated::ExchangeRate::fromCpp(cpp.exchange_rate))
                             exchangeFees:(::djinni_generated::ExchangeFees::fromCpp(cpp.exchange_fees))
                              submittedAt:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.submitted_at))
                              confirmedAt:(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(cpp.confirmed_at))];
}

}  // namespace djinni_generated
