// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from networking.djinni

#import "ZKHttpImpl+Private.h"
#import "ZKHttpImpl.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "ZKHttpCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKHttpImplCppProxy : NSObject<ZKHttpImpl>

- (id)initWithCpp:(const std::shared_ptr<::zumo::HttpImpl>&)cppRef;

@end

@implementation ZKHttpImplCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::HttpImpl>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::HttpImpl>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)request:(nonnull NSString *)url
         method:(nonnull NSString *)method
        headers:(nonnull NSDictionary<NSString *, NSString *> *)headers
           data:(nullable NSString *)data
       callback:(nullable ZKHttpCallback *)callback {
    try {
        _cppRefHandle.get()->request(::djinni::String::toCpp(url),
                                     ::djinni::String::toCpp(method),
                                     ::djinni::Map<::djinni::String, ::djinni::String>::toCpp(headers),
                                     ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(data),
                                     ::djinni_generated::HttpCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class HttpImpl::ObjcProxy final
: public ::zumo::HttpImpl
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::HttpImpl;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void request(const std::string & c_url, const std::string & c_method, const std::unordered_map<std::string, std::string> & c_headers, const std::experimental::optional<std::string> & c_data, const std::shared_ptr<::zumo::HttpCallback> & c_callback) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() request:(::djinni::String::fromCpp(c_url))
                                                       method:(::djinni::String::fromCpp(c_method))
                                                      headers:(::djinni::Map<::djinni::String, ::djinni::String>::fromCpp(c_headers))
                                                         data:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(c_data))
                                                     callback:(::djinni_generated::HttpCallback::fromCpp(c_callback))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto HttpImpl::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[ZKHttpImplCppProxy class]]) {
        return ((ZKHttpImplCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto HttpImpl::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<ZKHttpImplCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
