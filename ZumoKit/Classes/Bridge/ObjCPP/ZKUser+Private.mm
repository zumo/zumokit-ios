// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from user.djinni

#import "ZKUser+Private.h"
#import "ZKUser.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "ZKAccount+Private.h"
#import "ZKAccountCallback+Private.h"
#import "ZKAccountDataListener+Private.h"
#import "ZKAccountFiatPropertiesCallback+Private.h"
#import "ZKAddress+Private.h"
#import "ZKCardCallback+Private.h"
#import "ZKCardDetailsCallback+Private.h"
#import "ZKMnemonicCallback+Private.h"
#import "ZKPinCallback+Private.h"
#import "ZKSuccessCallback+Private.h"
#import "ZKWalletCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKUser ()

- (id)initWithCpp:(const std::shared_ptr<::zumo::User>&)cppRef;

@end

@implementation ZKUser {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::User>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::User>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_id();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)hasWallet {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->has_wallet();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isFiatCustomer:(nonnull NSString *)network {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->is_fiat_customer(::djinni::String::toCpp(network));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)makeFiatCustomer:(nonnull NSString *)network
               firstName:(nonnull NSString *)firstName
              middleName:(nullable NSString *)middleName
                lastName:(nonnull NSString *)lastName
             dateOfBirth:(nonnull NSString *)dateOfBirth
                   email:(nonnull NSString *)email
                   phone:(nonnull NSString *)phone
                 address:(nonnull ZKAddress *)address
                callback:(nullable id<ZKSuccessCallback>)callback {
    try {
        _cppRefHandle.get()->make_fiat_customer(::djinni::String::toCpp(network),
                                                ::djinni::String::toCpp(firstName),
                                                ::djinni::Optional<std::optional, ::djinni::String>::toCpp(middleName),
                                                ::djinni::String::toCpp(lastName),
                                                ::djinni::String::toCpp(dateOfBirth),
                                                ::djinni::String::toCpp(email),
                                                ::djinni::String::toCpp(phone),
                                                ::djinni_generated::Address::toCpp(address),
                                                ::djinni_generated::SuccessCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)createFiatAccount:(nonnull NSString *)network
             currencyCode:(nonnull NSString *)currencyCode
                 callback:(nullable id<ZKAccountCallback>)callback {
    try {
        _cppRefHandle.get()->create_fiat_account(::djinni::String::toCpp(network),
                                                 ::djinni::String::toCpp(currencyCode),
                                                 ::djinni_generated::AccountCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getNominatedAccountFiatProperties:(nonnull NSString *)accountId
                                 callback:(nullable id<ZKAccountFiatPropertiesCallback>)callback {
    try {
        _cppRefHandle.get()->get_nominated_account_fiat_properties(::djinni::String::toCpp(accountId),
                                                                   ::djinni_generated::AccountFiatPropertiesCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)createCard:(nonnull NSString *)fiatAccountId
          cardType:(nonnull NSString *)cardType
      mobileNumber:(nonnull NSString *)mobileNumber
          callback:(nullable id<ZKCardCallback>)callback {
    try {
        _cppRefHandle.get()->create_card(::djinni::String::toCpp(fiatAccountId),
                                         ::djinni::String::toCpp(cardType),
                                         ::djinni::String::toCpp(mobileNumber),
                                         ::djinni_generated::CardCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCardStatus:(nonnull NSString *)cardId
           cardStatus:(nonnull NSString *)cardStatus
                  pan:(nullable NSString *)pan
                 cvv2:(nullable NSString *)cvv2
             callback:(nullable id<ZKSuccessCallback>)callback {
    try {
        _cppRefHandle.get()->set_card_status(::djinni::String::toCpp(cardId),
                                             ::djinni::String::toCpp(cardStatus),
                                             ::djinni::Optional<std::optional, ::djinni::String>::toCpp(pan),
                                             ::djinni::Optional<std::optional, ::djinni::String>::toCpp(cvv2),
                                             ::djinni_generated::SuccessCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)revealCardDetails:(nonnull NSString *)cardId
                 callback:(nullable id<ZKCardDetailsCallback>)callback {
    try {
        _cppRefHandle.get()->reveal_card_details(::djinni::String::toCpp(cardId),
                                                 ::djinni_generated::CardDetailsCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)revealPin:(nonnull NSString *)cardId
         callback:(nullable id<ZKPinCallback>)callback {
    try {
        _cppRefHandle.get()->reveal_pin(::djinni::String::toCpp(cardId),
                                        ::djinni_generated::PinCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)unblockPin:(nonnull NSString *)cardId
          callback:(nullable id<ZKSuccessCallback>)callback {
    try {
        _cppRefHandle.get()->unblock_pin(::djinni::String::toCpp(cardId),
                                         ::djinni_generated::SuccessCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)createWallet:(nonnull NSString *)mnemonic
            password:(nonnull NSString *)password
            callback:(nullable id<ZKWalletCallback>)callback {
    try {
        _cppRefHandle.get()->create_wallet(::djinni::String::toCpp(mnemonic),
                                           ::djinni::String::toCpp(password),
                                           ::djinni_generated::WalletCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)unlockWallet:(nonnull NSString *)password
            callback:(nullable id<ZKWalletCallback>)callback {
    try {
        _cppRefHandle.get()->unlock_wallet(::djinni::String::toCpp(password),
                                           ::djinni_generated::WalletCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)revealMnemonic:(nonnull NSString *)password
              callback:(nullable id<ZKMnemonicCallback>)callback {
    try {
        _cppRefHandle.get()->reveal_mnemonic(::djinni::String::toCpp(password),
                                             ::djinni_generated::MnemonicCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isRecoveryMnemonic:(nonnull NSString *)mnemonic {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->is_recovery_mnemonic(::djinni::String::toCpp(mnemonic));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)recoverWallet:(nonnull NSString *)mnemonic
             password:(nonnull NSString *)password
             callback:(nullable id<ZKWalletCallback>)callback {
    try {
        _cppRefHandle.get()->recover_wallet(::djinni::String::toCpp(mnemonic),
                                            ::djinni::String::toCpp(password),
                                            ::djinni_generated::WalletCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ZKAccount *)getAccount:(nonnull NSString *)currencyCode
                           network:(nonnull NSString *)network
                              type:(nonnull NSString *)type {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_account(::djinni::String::toCpp(currencyCode),
                                                               ::djinni::String::toCpp(network),
                                                               ::djinni::String::toCpp(type));
        return ::djinni::Optional<std::optional, ::djinni_generated::Account>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<ZKAccount *> *)getAccounts {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_accounts();
        return ::djinni::List<::djinni_generated::Account>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addAccountDataListener:(nullable id<ZKAccountDataListener>)listener {
    try {
        _cppRefHandle.get()->add_account_data_listener(::djinni_generated::AccountDataListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)removeAccountDataListener:(nullable id<ZKAccountDataListener>)listener {
    try {
        _cppRefHandle.get()->remove_account_data_listener(::djinni_generated::AccountDataListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto User::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto User::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<ZKUser>(cpp);
}

}  // namespace djinni_generated

@end
