// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from user.djinni

#import "ZKAccountListener+Private.h"
#import "ZKAccountListener.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "ZKAccount+Private.h"
#import "ZKTransaction+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ZKAccountListenerCppProxy : NSObject<ZKAccountListener>

- (id)initWithCpp:(const std::shared_ptr<::zumo::AccountListener>&)cppRef;

@end

@implementation ZKAccountListenerCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::zumo::AccountListener>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::zumo::AccountListener>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)update:(nullable ZKAccount *)account
  transactions:(nonnull NSArray<ZKTransaction *> *)transactions {
    try {
        _cppRefHandle.get()->update(::djinni::Optional<std::experimental::optional, ::djinni_generated::Account>::toCpp(account),
                                    ::djinni::List<::djinni_generated::Transaction>::toCpp(transactions));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class AccountListener::ObjcProxy final
: public ::zumo::AccountListener
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::AccountListener;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void update(const std::experimental::optional<::zumo::Account> & c_account, const std::vector<::zumo::Transaction> & c_transactions) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() update:(::djinni::Optional<std::experimental::optional, ::djinni_generated::Account>::fromCpp(c_account))
                                                transactions:(::djinni::List<::djinni_generated::Transaction>::fromCpp(c_transactions))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto AccountListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[ZKAccountListenerCppProxy class]]) {
        return ((ZKAccountListenerCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto AccountListener::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<ZKAccountListenerCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
