// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

#pragma once

#include "decimal.hpp"
#include "exchange_rate.hpp"
#include "exchange_setting.hpp"
#include <cstdint>
#include <optional>
#include <string>
#include <unordered_map>
#include <utility>

namespace zumo {

/** Record containing exchange details. */
struct Exchange final {
    /** Identifier */
    std::string id;
    /**
     * Exchange status.
     * @see ExchangeStatus
     */
    std::string status;
    /**
     * Currency from which exchange was made.
     * @see CurrencyCode
     */
    std::string from_currency;
    /** Source Account identifier. */
    std::string from_account_id;
    /** Outgoing Transaction identifier. */
    std::optional<std::string> outgoing_transaction_id;
    /**
     * Currency to which exchange was made.
     * @see CurrencyCode
     */
    std::string to_currency;
    /** Target Account identifier. */
    std::string to_account_id;
    /** Return Transaction identifier. */
    std::optional<std::string> return_transaction_id;
    /** Amount in deposit currency. */
    ::zumo::Decimal amount;
    /** Outgoing transaction fee. */
    std::optional<::zumo::Decimal> outgoing_transaction_fee;
    /**
     * Amount that user receives, calculated as <code>amount X exchangeRate X (1 - feeRate) - returnTransactionFee</code>.
     * @see ExchangeSetting
     */
    ::zumo::Decimal return_amount;
    /**
     * Exchange fee, calculated as <code>amount X exchangeRate X exchangeFeeRate</code>.
     * @see ExchangeSetting
     */
    ::zumo::Decimal exchange_fee;
    /**
     * Return transaction fee.
     * @see ExchangeSetting
     */
    ::zumo::Decimal return_transaction_fee;
    /** Exchange rate used. */
    ExchangeRate exchange_rate;
    /** Exchange setting used. */
    ExchangeSetting exchange_setting;
    /**
     * Exchange rates at the time exchange was made.
     * This can be used to display amounts in local currency to the user.
     */
    std::unordered_map<std::string, std::unordered_map<std::string, ExchangeRate>> exchange_rates;
    /** Exchange nonce or null. Used to prevent double spend. */
    std::optional<std::string> nonce;
    /** Epoch timestamp when transaction was submitted. */
    std::optional<int32_t> submitted_at;
    /** Epoch timestamp when transaction was confirmed or null if not yet confirmed. */
    std::optional<int32_t> confirmed_at;

    friend bool operator==(const Exchange& lhs, const Exchange& rhs);
    friend bool operator!=(const Exchange& lhs, const Exchange& rhs);

    Exchange(std::string id_,
             std::string status_,
             std::string from_currency_,
             std::string from_account_id_,
             std::optional<std::string> outgoing_transaction_id_,
             std::string to_currency_,
             std::string to_account_id_,
             std::optional<std::string> return_transaction_id_,
             ::zumo::Decimal amount_,
             std::optional<::zumo::Decimal> outgoing_transaction_fee_,
             ::zumo::Decimal return_amount_,
             ::zumo::Decimal exchange_fee_,
             ::zumo::Decimal return_transaction_fee_,
             ExchangeRate exchange_rate_,
             ExchangeSetting exchange_setting_,
             std::unordered_map<std::string, std::unordered_map<std::string, ExchangeRate>> exchange_rates_,
             std::optional<std::string> nonce_,
             std::optional<int32_t> submitted_at_,
             std::optional<int32_t> confirmed_at_)
    : id(std::move(id_))
    , status(std::move(status_))
    , from_currency(std::move(from_currency_))
    , from_account_id(std::move(from_account_id_))
    , outgoing_transaction_id(std::move(outgoing_transaction_id_))
    , to_currency(std::move(to_currency_))
    , to_account_id(std::move(to_account_id_))
    , return_transaction_id(std::move(return_transaction_id_))
    , amount(std::move(amount_))
    , outgoing_transaction_fee(std::move(outgoing_transaction_fee_))
    , return_amount(std::move(return_amount_))
    , exchange_fee(std::move(exchange_fee_))
    , return_transaction_fee(std::move(return_transaction_fee_))
    , exchange_rate(std::move(exchange_rate_))
    , exchange_setting(std::move(exchange_setting_))
    , exchange_rates(std::move(exchange_rates_))
    , nonce(std::move(nonce_))
    , submitted_at(std::move(submitted_at_))
    , confirmed_at(std::move(confirmed_at_))
    {}
};

}  // namespace zumo
