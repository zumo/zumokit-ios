// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from zumo_core.djinni

#pragma once

#include "stdx/optional.hpp"
#include <memory>
#include <string>
#include <unordered_map>

namespace zumo {

class ChangeListener;
class HistoricalExchangeRatesCallback;
class HttpImpl;
class User;
class UserCallback;
class Utils;
class WebSocketImpl;
struct ExchangeRate;
struct ExchangeSetting;
struct TransactionFeeRate;

/** Entry point to ZumoKit C++ SDK */
class ZumoCore {
public:
    virtual ~ZumoCore() {}

    /**
     * Get ZumoKit SDK version.
     * @return semantic version tag if exists, commit hash otherwise
     */
    static std::string get_version();

    /**
     * Initializes ZumoKit SDK. Should only be called once.
     *
     * @param http_impl        HTTP implementation
     * @param ws_impl          WebSocet implementation
     * @param api_key          ZumoKit Api-Key
     * @param api_url         ZumoKit API url
     * @param tx_service_url  ZumoKit Transaction Service url
     *
     * @return ZumoKit instance
     */
    static std::shared_ptr<ZumoCore> init(const std::shared_ptr<HttpImpl> & http_impl, const std::shared_ptr<WebSocketImpl> & ws_impl, const std::string & api_key, const std::string & api_url, const std::string & tx_service_url);

    /**
     * Authenticates user token set and returns corresponding user. On success user is set as active user.
     * Refer to <a href="https://developers.zumo.money/docs/setup/server#get-zumokit-user-token">Server</a> guide for details on how to get user token set.
     *
     * @param user_token_set   user token set
     * @param callback         an interface to receive the result or error
     *
     * @see User
     */
    virtual void auth_user(const std::string & user_token_set, const std::shared_ptr<UserCallback> & callback) = 0;

    /**
     * Get active user if exists.
     *
     * @return active user or null
     */
    virtual std::shared_ptr<User> get_active_user() = 0;

    /**
     * Get crypto utils class.
     *
     * @return crypto utils
     */
    virtual std::shared_ptr<Utils> get_utils() = 0;

    /**
     * Get exchange rate for selected currency pair.
     *
     * @param from_currency   currency code
     * @param to_currency     currency code
     *
     * @return exchange rate or null
     */
    virtual std::experimental::optional<ExchangeRate> get_exchange_rate(const std::string & from_currency, const std::string & to_currency) = 0;

    /**
     * Get all available exchange rates.
     *
     * @return mapping between currency pairs and exchange rates
     */
    virtual std::unordered_map<std::string, std::unordered_map<std::string, ExchangeRate>> get_exchange_rates() = 0;

    /**
     * Get exchange setting for selected currency pair.
     *
     * @param from_currency   currency code
     * @param to_currency     currency code
     *
     * @return exchange setting or null
     */
    virtual std::experimental::optional<ExchangeSetting> get_exchange_setting(const std::string & from_currency, const std::string & to_currency) = 0;

    /**
     * Get all available exchange settings.
     *
     * @return mapping between currency pairs and exchange settings
     */
    virtual std::unordered_map<std::string, std::unordered_map<std::string, ExchangeSetting>> get_exchange_settings() = 0;

    /**
     * Get transaction fee rates for selected crypto currency.
     *
     * @param currency currency code
     *
     * @return transaction fee rate or null
     */
    virtual std::experimental::optional<TransactionFeeRate> get_transaction_fee_rate(const std::string & currency) = 0;

    /**
     * Get all available crypto transaction fee rates.
     *
     * @return mapping between cryptocurrencies and transaction fee rate
     */
    virtual std::unordered_map<std::string, TransactionFeeRate> get_transaction_fee_rates() = 0;

    /**
     * Fetch historical exchange rates for supported time intervals.
     * On success callback returns historical exchange rates are contained in a mapping between
     * time interval on a top level, from currency on second level, to currency on third level and ExchangeRate objects.
     *
     * @param callback         an interface to receive the result or error
     *
     * @see TimeInterval
     */
    virtual void fetch_historical_exchange_rates(const std::shared_ptr<HistoricalExchangeRatesCallback> & callback) = 0;

    /**
     * Listen to changes in exchange rates, exchange settings or transaction fee rates.
     * @param listener interface to listen to changes
     */
    virtual void add_change_listener(const std::shared_ptr<ChangeListener> & listener) = 0;

    /**
     * Remove change listener.
     * @param listener interface to listen to changes
     */
    virtual void remove_change_listener(const std::shared_ptr<ChangeListener> & listener) = 0;
};

}  // namespace zumo
