// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from user.djinni

#pragma once

#include "stdx/optional.hpp"
#include <memory>
#include <string>
#include <vector>

namespace zumo {

class AccountCallback;
class AccountFiatPropertiesCallback;
class AccountListener;
class MnemonicCallback;
class SuccessCallback;
class TransactionListener;
class UserListener;
class WalletCallback;
struct Account;
struct Exchange;
struct Transaction;

/**
 * User class provides methods for managing user wallet and accounts.
 * <p>
 * User instance can be obtained via <code>getUser</code> method on @link ZumoKit instance.
 * <p>
 * See <a href="https://developers.zumo.money/docs/guides/manage-user-wallet">Manage User Wallet</a>,
 * <a href="https://developers.zumo.money/docs/guides/create-fiat-account">Create Fiat Account</a> and
 * <a href="https://developers.zumo.money/docs/guides/view-user-data">View User Data</a>
 * guides for usage details.
 */
class User {
public:
    virtual ~User() {}

    /**
     * Get user id.
     * @return user id
     */
    virtual std::string get_id() = 0;

    /**
     * Check if user has wallet
     * @return true if user has wallet
     */
    virtual bool has_wallet() = 0;

    /**
     * Check if user is currenly active user. Only one user can be active at a time.
     * @return true if user is currenly active user
     */
    virtual bool is_active_user() = 0;

    /**
     * Check if user is a Modulr customer on 'MAINNET' or 'TESTNET' network.
     * @param  network 'MAINNET' or 'TESTNET'
     * @return true if user is currenly active user.
     * @see    NetworkType
     */
    virtual bool is_modulr_customer(const std::string & network) = 0;

    /**
     * Make user Modulr customer on specified network by providing user's personal details.
     * @param  network        'MAINNET' or 'TESTNET'
     * @param  first_name     first name
     * @param  middle_name    middle name or null
     * @param  last_name      last name
     * @param  date_of_birth  date of birth in ISO 8601 format, e.g '2020-08-12'
     * @param  phone          phone number
     * @param  address_line_1 address line 1
     * @param  address_line_2 adress line 2 or null
     * @param  country        country code in ISO 3166-1 Alpha-2 format, e.g. 'GB'
     * @param  post_code      post code
     * @param  post_town      post town
     * @param callback        an interface to receive the result or error
     * @see    NetworkType
     */
    virtual void make_modulr_customer(const std::string & network, const std::string & first_name, const std::experimental::optional<std::string> & middle_name, const std::string & last_name, const std::string & date_of_birth, const std::string & email, const std::string & phone, const std::string & address_line_1, const std::experimental::optional<std::string> & address_line_2, const std::string & country, const std::string & post_code, const std::string & post_town, const std::shared_ptr<SuccessCallback> & callback) = 0;

    /**
     * Create fiat account on specified network and currency code. User must already be Modulr customer on specified network.
     * @param  network        'MAINNET' or 'TESTNET'
     * @param  currency_code  country code in ISO 4217 format, e.g. 'GBP'
     * @param  callback       an interface to receive the result or error
     * @see    Account
     * @see    NetworkType
     */
    virtual void create_fiat_account(const std::string & network, const std::string & currency_code, const std::shared_ptr<AccountCallback> & callback) = 0;

    /**
     * Get nominated account details for specified account if it exists.
     * Refer to
     * <a href="https://developers.zumo.money/docs/guides/send-transactions#bitcoin">Create Fiat Account</a>
     * for explanation about nominated account.
     * @param  account_id     @link Account id
     * @param  callback       an interface to receive the result or error
     * @see AccountFiatProperties
     */
    virtual void get_nominated_account_fiat_properties(const std::string & account_id, const std::shared_ptr<AccountFiatPropertiesCallback> & callback) = 0;

    /**
     * Create user wallet seeded by provided mnemonic and encrypted with user's password.
     * <p>
     * Mnemonic can be generated by <code>generateMnemonic</code> method in @link Utils class.
     * @param  mnemonic       mnemonic seed phrase
     * @param  password       user provided password
     * @param  callback       an interface to receive the result or error
     * @see    Wallet
     */
    virtual void create_wallet(const std::string & mnemonic, const std::string & password, const std::shared_ptr<WalletCallback> & callback) = 0;

    /**
     * Unlock user wallet with user's password.
     * @param  password       user provided password
     * @param  callback       an interface to receive the result or error
     * @see    Wallet
     */
    virtual void unlock_wallet(const std::string & password, const std::shared_ptr<WalletCallback> & callback) = 0;

    /**
     * Reveal menmonic seed phrase used to seed user wallet.
     * @param  password       user provided password
     * @param  callback       an interface to receive the result or error
     */
    virtual void reveal_mnemonic(const std::string & password, const std::shared_ptr<MnemonicCallback> & callback) = 0;

    /**
     * Check if mnemonic seed phrase corresponds to user's wallet.
     * This is useful for validating seed phrase before trying to recover wallet.
     * @param  mnemonic       mnemonic seed phrase
     * @return true if mnemonic seed phrase corresponds to user's wallet
     */
    virtual bool is_recovery_mnemonic(const std::string & mnemonic) = 0;

    /**
     * Recover user wallet with mnemonic seed phrase corresponding to user's wallet.
     * This can be used if user forgets his password or wants to change his wallet password.
     * @param  mnemonic       mnemonic seed phrase corresponding to user's wallet
     * @param  password       user provided password
     * @param  callback       an interface to receive the result or error
     */
    virtual void recover_wallet(const std::string & mnemonic, const std::string & password, const std::shared_ptr<WalletCallback> & callback) = 0;

    /**
     * Get account in specific currency, on specific network, with specific type.
     * @param  currency_code       currency code, e.g. 'BTC', 'ETH' or 'GBP'
     * @param  network             network type, e.g. 'MAINNET', 'TESTNET' or 'RINKEBY'
     * @param  type                account type, e.g. 'STANDARD', 'COMPATIBILITY' or 'SEGWIT'
     * @return account with selected parameters if it exists, null otherwise
     * @see CurrencyCode
     * @see NetworkType
     * @see AccountType
     */
    virtual std::experimental::optional<Account> get_account(const std::string & currency_code, const std::string & network, const std::string & type) = 0;

    /**
     * Get all user accounts.
     * @return all user accounts
     */
    virtual std::vector<Account> get_accounts() = 0;

    /**
     * Get account transactions for specified account.
     * @param account_id @link Account identifier
     * @return all transactions corresponding to specified account
     */
    virtual std::vector<Transaction> get_account_transactions(const std::string & account_id) = 0;

    /**
     * Get all user transactions.
     * @return all user transactions
     */
    virtual std::vector<Transaction> get_transactions() = 0;

    /**
     * Get transaction with specific transaction identifier if such transaction exists.
     * @param transaction_id @link Transaction identifier
     * @return transaction with specified identifier if exists, null otherwise
     */
    virtual std::experimental::optional<Transaction> get_transaction(const std::string & transaction_id) = 0;

    /**
     * Get all user exchanges.
     * @return all user exchanges
     */
    virtual std::vector<Exchange> get_exchanges() = 0;

    /**
     * Get exchange associated with selected transaction if such exchange exists.
     * @return exchange associated with selected transaction if such exchange exists
     */
    virtual std::experimental::optional<Exchange> get_exchange_by_transaction_id(const std::string & transaction_id) = 0;

    /**
     * Listen to all user changes.
     * @param listener interface to listen to user changes
     */
    virtual void add_listener(const std::shared_ptr<UserListener> & listener) = 0;

    /**
     * Remove listener to user changes.
     * @param listener interface to listen to user changes
     */
    virtual void remove_listener(const std::shared_ptr<UserListener> & listener) = 0;

    /**
     * Listen to all account changes for specific account.
     * @param account_id @link Account identifier
     * @param listener   interface to listen to account changes
     */
    virtual void add_account_listener(const std::string & account_id, const std::shared_ptr<AccountListener> & listener) = 0;

    /**
     * Remove listener to account changes.
     * @param listener interface to listen to user changes
     */
    virtual void remove_account_listener(const std::shared_ptr<AccountListener> & listener) = 0;

    /**
     * Listen to all transaction changes for specific transaction.
     * @param transaction_id @link Transaction identifier
     * @param listener       interface to listen to transaction changes
     */
    virtual void add_transaction_listener(const std::string & transaction_id, const std::shared_ptr<TransactionListener> & listener) = 0;

    /**
     * Remove listener to transaction changes.
     * @param listener interface to listen to transaction changes
     */
    virtual void remove_transaction_listener(const std::shared_ptr<TransactionListener> & listener) = 0;
};

}  // namespace zumo
